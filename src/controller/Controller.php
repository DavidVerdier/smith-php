<?php
namespace Smith\Controller;

use Smith\Http\Response;
use Smith\Http\Request;
use Smith\Template\Component;

abstract class Controller {

    /**
     * The Smith\Http\Request currently being processed by this controller.
     */
    private $request;

    /**
     * The Smith\Http\Response currently being generated by this controller.
     */
    private $response;

    /**
     * The root component currently bound to be rendered to the response after this controller's execution.
     */
    private $view = null;

    /**
     * Tells whether or not the controller has been initialized (through _init()) and is ready for execution.
     */
    private $ready = false;

    /**
     * Prepares the controller for execution.
     * This is here to leave implementation of a custom constructor to the user.
     * This function should only be called by an instance Smith\App managing execution of this controller.
     */
    public function _init(Request $request) {
        if ($this->ready) return;
        $this->request = $request;
        $this->response = new Response;
        $this->ready = true;
    }

    /**
     * @returns The Smith\Http\Request currently being processed by this controller.
     */
    public function getRequest() {
        return $this->request;
    }

    /**
     * @returns The Smith\Http\Response currently being generated by this controller.
     */
    public function getResponse() {
        if ($this->view !== null) {
            $this->response->append($this->view->render());
        }
        return $this->response;
    }

    /**
     * Redirects the client to the given location.
     * By default, redirect() sends a HTTP status header of 301 for SEO-safe redirection.
     * The $temporary flags signals that this should be a temporary redirection (HTTP status code 302).
     */
    protected function redirect(string $location, bool $temporary = false) {
        if ($temporary) {
            $this->response->headers->setStatus('302 Moved Temporarily');
        } else {
            $this->response->headers->setStatus('301 Moved Permanently');
        }
        $this->response->headers->set('Location',$location);
        $this->response->headers->send();
    }

    /**
     * Sets a component to be rendered to the response after the end of this controller's execution.
     */
    protected function view(Component $view) {
        $this->view = $view;
    }
}
?>
